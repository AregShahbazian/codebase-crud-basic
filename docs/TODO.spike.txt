
Learn webpack,
    read overview
	    https://webpack.js.org/concepts/
    and go deeper in "Learn more" links

Learn HTML5

Learn CSS3

Learn SASS

Learn Caching
	react / redux / redux-saga level?


***********
HISTORY


var vs let:
    var is scoped to nearest function
    let is scoped to nearest block

what's UMD/AMD/cjs?
    https://www.jvandemo.com/a-10-minute-primer-to-javascript-modules-module-formats-module-loaders-and-module-bundlers/
    Immediately Invoked Function Expression (IIFE)
        you can immediately call a function as you declare it by making the declaration an expression
        line starting with 'function' is a declaration
    Revealing Module pattern
        assign the declaration to a variable, and it's a constructor and can be used to create modules with 'new' keyword
        surround the declaration with parenthesis, and it's an expression
    Pre-ES6 patterns also define modules:
        AMD (browsers), CJS (nodeJs) and UMD (browser and nodejs), Global
    ES6 uses export
    Module loaders load modules on the fly (default way)
    Module bundlers bundle modules in a single file during build
        Browserfy
        Webpack

how do webpack plugins work?
    Webpack plugins run custom code at compile time.

how doe the Webpack Globalize Plugin plugin work?
    It makes the program load CLDR (Common Locale Data Repository) data on DEV or compiled data on PROD
    location/format of custom messages can be given as 'mesages' parameter to the plugin construtor
    location/format of output of production build can be specified in 'output' parameter

Learn wiremock
    http://wiremock.org/docs/response-templating/

    API best practices
        http://www.vinaysahni.com/best-practices-for-a-pragmatic-restful-api
        RFC 7231
            https://tools.ietf.org/html/rfc7231#section-4.3


Learn redux-saga
    https://redux-saga.js.org/docs/introduction/BeginnerTutorial.html

    What's a Promise?
        The Promise object represents the eventual completion (or failure) of an asynchronous operation, and its resulting value.
        https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise

    What's a saga?
        A saga is a storyline started by some action.

    What does the yield keyword do
        The yield keyword pauses generator function execution and the value of the expression following the yield keyword is
        returned to the generator's caller. It can be thought of as a generator-based version of the return keyword.
        https://developer.mozilla.org/nl/docs/Web/JavaScript/Reference/Operators/yield

    How does redux-saga work?
        Sagas are made of yield-functions, which will be interpreted by the saga middleware
        If a promise is given to the middleware, it will suspend the saga until the promise is resolved (delay is over, or api call returns)
        A "call" (effect) can be yielded to call a function
        A "put" (effect) can be yielded to dispatch an action
        When an effect is yielded, the middleware recieves the retrn object of the effect. The saga is paused, until the effect has been fulfilled
        A helper function "takeEvery" can be used to listen to actions, and do something
        The helper function "takeLatest" will listen to the latest dispached action, and will cancel preiously dispached
            actions of the same type
        Saga generator functions can be tested by calling the .next() function of the generator, and checking that the
            effects are deep-equal to what is expected.

    examples
        https://github.com/redux-saga/redux-saga/tree/master/examples/real-world


P: spread operator (...) is Unexpected Token
S: stage-2 preset is required. install it.
    found out: https://github.com/babel/babel-loader/issues/170
    sol: https://babeljs.io/docs/plugins/preset-stage-2/

Learn Normalizr and Schemas
    https://github.com/paularmstrong/normalizr/tree/master/docs
    normalizr converts JSON data with nested entities to flattened data
    it uses defined Schemas










