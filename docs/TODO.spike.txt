
JSON API
    JSONAPI vs GraphQL
        https://nordicapis.com/the-benefits-of-using-json-api/
    http://jsonapi.org/
    full specifications
        http://jsonapi.org/format/

    NOTES:
        difference between relationships.*.links.self and relationships.*.links.related:
            https://stackoverflow.com/questions/32522212/jsonapi-difference-between-self-and-related-in-a-links-resource/33038105#33038105
            self is for the relationship (like koppeltabel)
            related is for the related resources (like foreign tabel)
        creating relationship
            https://github.com/json-api/json-api/issues/1158


Research server side sorting, filtering and pagination
    https://www.softfluent.com/documentation/BOM_SP_DYN_Server.html
        "Server side sorting should be preferred in almost all cases to client side sorting"

    Sorting, Filtering and Pagination
        https://specs.openstack.org/openstack/api-wg/guidelines/pagination_filter_sort.html
        https://www.moesif.com/blog/technical/api-design/REST-API-Design-Filtering-Sorting-and-Pagination/


Learn webpack,
    read overview
	    https://webpack.js.org/concepts/
    and go deeper in "Learn more" links

Learn HTML5

Learn CSS3

Learn SASS

Learn lints

Learn Flow


Learn redux-orm
    context
    https://redux.js.org/recipes/structuring-reducers/updating-normalized-data

    youtube

    example peer project
    http://blog.isquaredsoftware.com/2016/10/practical-redux-part-0-introduction/

    gthub
    https://github.com/tommikaikkonen/redux-orm



***********
HISTORY


var vs let:
    var is scoped to nearest function
    let is scoped to nearest block

what's UMD/AMD/cjs?
    https://www.jvandemo.com/a-10-minute-primer-to-javascript-modules-module-formats-module-loaders-and-module-bundlers/
    Immediately Invoked Function Expression (IIFE)
        you can immediately call a function as you declare it by making the declaration an expression
        line starting with 'function' is a declaration
    Revealing Module pattern
        assign the declaration to a variable, and it's a constructor and can be used to create modules with 'new' keyword
        surround the declaration with parenthesis, and it's an expression
    Pre-ES6 patterns also define modules:
        AMD (browsers), CJS (nodeJs) and UMD (browser and nodejs), Global
    ES6 uses export
    Module loaders load modules on the fly (default way)
    Module bundlers bundle modules in a single file during build
        Browserfy
        Webpack

how do webpack plugins work?
    Webpack plugins run custom code at compile time.

how doe the Webpack Globalize Plugin plugin work?
    It makes the program load CLDR (Common Locale Data Repository) data on DEV or compiled data on PROD
    location/format of custom messages can be given as 'mesages' parameter to the plugin construtor
    location/format of output of production build can be specified in 'output' parameter

Learn wiremock
    http://wiremock.org/docs/response-templating/

    API best practices
        http://www.vinaysahni.com/best-practices-for-a-pragmatic-restful-api
        RFC 7231
            https://tools.ietf.org/html/rfc7231#section-4.3


Learn redux-saga
    https://redux-saga.js.org/docs/introduction/BeginnerTutorial.html

    What's a Promise?
        The Promise object represents the eventual completion (or failure) of an asynchronous operation, and its resulting value.
        https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise

    What's a saga?
        A saga is a storyline started by some action.

    What does the yield keyword do
        The yield keyword pauses generator function execution and the value of the expression following the yield keyword is
        returned to the generator's caller. It can be thought of as a generator-based version of the return keyword.
        https://developer.mozilla.org/nl/docs/Web/JavaScript/Reference/Operators/yield

    How does redux-saga work?
        Sagas are made of yield-functions, which will be interpreted by the saga middleware
        If a promise is given to the middleware, it will suspend the saga until the promise is resolved (delay is over, or api call returns)
        A "call" (effect) can be yielded to call a function
        A "put" (effect) can be yielded to dispatch an action
        When an effect is yielded, the middleware recieves the retrn object of the effect. The saga is paused, until the effect has been fulfilled
        A helper function "takeEvery" can be used to listen to actions, and do something
        The helper function "takeLatest" will listen to the latest dispached action, and will cancel preiously dispached
            actions of the same type
        Saga generator functions can be tested by calling the .next() function of the generator, and checking that the
            effects are deep-equal to what is expected.

        unit testing sagas
            with redux-saga-test-plan
            to test helper-effects with testSaga, use i.e. takeLatestEffect instead of takeLatest

            to test sagas which use the result of a call for another yield, pass the result to .next()
                example: https://github.com/jfairbank/redux-saga-test-plan/issues/38

            to test branching in sagas, use .back(N) : http://redux-saga-test-plan.jeremyfairbank.com/unit-testing/time-travel.html

    examples
        https://github.com/redux-saga/redux-saga/tree/master/examples/real-world


P: spread operator (...) is Unexpected Token
S: stage-2 preset is required. install it.
    found out: https://github.com/babel/babel-loader/issues/170
    sol: https://babeljs.io/docs/plugins/preset-stage-2/

Learn Normalizr and Schemas
    https://github.com/paularmstrong/normalizr/tree/master/docs
    normalizr converts JSON data with nested entities to flattened data
    it uses defined Schemas
    Usage:
        https://github.com/paularmstrong/normalizr/blob/master/docs/api.md#usage-2

Mock functions in Jest:
    https://facebook.github.io/jest/docs/en/mock-functions.html
        Use mockReturnValue to mock return value

Learn axios
    GitHub: https://github.com/axios/axios

    Review: https://medium.com/@shahata/why-i-wont-be-using-fetch-api-in-my-apps-6900e6c6fe78
        "fetch is very explicit: you don't get anything unless you ask for it"

        you can set default:
            axios.defaults.*

Learn redux-actions
    https://redux-actions.js.org/docs/introduction/Tutorial.html

Learn RESTful filtering
    https://stackoverflow.com/questions/5020704/how-to-design-restful-search-filtering
    http://www.vinaysahni.com/best-practices-for-a-pragmatic-restful-api#advanced-queries

    Option 1: implement filtering as a POST resource: POST body contains filter parameters, and a new filter-"resource"
    is created (not necessarily persisted).
        + concise way of sending filtering parameters as data
        - search can be cached and bookmarked

    Option 2: implement filtering using URL/query parameters
        + search can be cached and bookmarked

React's Functional Stateless Components:
    aka arrow notation instead of "... extends Component"
    https://hackernoon.com/react-stateless-functional-components-nine-wins-you-might-have-overlooked-997b0d933dbc
    "...donâ€™t support state or lifecycle methods..."
    Use only when a component doesn't need the state or lifecycle methods


React Component lifecycle
    https://www.youtube.com/watch?v=Oioo0IdoEls
    componentWillMount
        right before initial render
    componentDidMount
        right after initial render
    componentWillReceiveProps
        whenever component receives new props, because the state changed
    shouldComponentUpdate
        after receiving new props, before rendering
        can be implemented to do some check to prevent (or force) re-rendering
    componentWillUpdate
        after receiving new props, before rendering
    componentDidUpdate
        after component is updated and sent to DOM
    componentWillUnmount
        right before removing component from DOM




Updating state immutably
    Object.assign does a shallow copy for all non-top-level (nested) properties. If a nested property has to be updated
    in a reducer, a deep clone of that property is necessary. The rest of the state can be shallow copied to keep
    performance
        https://redux.js.org/faq/performance#performance-clone-state

    Recipes for correct immutable update
        https://redux.js.org/recipes/structuring-reducers/immutable-update-patterns

Learn redux-form
    read especially https://redux-form.com/6.0.0-alpha.4/docs/faq/howtoclear.md/
        how to clear fields

    To affect edux-form state, use the .plugin() API


Learn Component/Container pattern
    short description
        https://medium.com/@learnreact/container-components-c0e67432e005
    Dan Abravom
        https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0

    all presentational code is in components
    all state-code is in containers
    see code in: https://github.com/erikras/redux-form/issues/369
        (rockallite)


Investigate JavaScript TypeChecking
    TypeScript
        Made by Microsoft .. .bleh

    Flow
        typechecking for Javascript
        setup+getting started:
            https://github.com/facebook/flow

        !docs+Guide
            https://flow.org/en/docs/getting-started/

        .flowconfig
            Library definitions     https://flow.org/en/docs/config/libs/
                defines type information for a 3rd party library
                    https://flow.org/en/docs/libdefs/
            *    The "flow-typed" tool helps find and install existing libdefs of the dependencies
                    https://github.com/flowtype/flow-typed

            Lints       https://flow.org/en/docs/config/lints/

        with React
            https://medium.com/flow-type/even-better-support-for-react-in-flow-25b0a3485627

Investigate End-ToEnd testing
    Learn jest+Enzym for component testing
        https://hackernoon.com/react-unit-test-example-tutorial-jest-enzyme-jsdom-mocha-chai-state-props-component-7ec850a98566
        https://hackernoon.com/testing-react-components-with-jest-and-enzyme-41d592c174f

        + Unit testing Components
        - I don't need Component testing, I need actual E2E testing

    Learn TestCafe
        http://devexpress.github.io/testcafe/documentation/getting-started/

        needs browsers installed locally
        can also run headless
        can also run on remote device
            http://devexpress.github.io/testcafe/documentation/using-testcafe/command-line-interface.html#remote-browsers
            http://devexpress.github.io/testcafe/documentation/using-testcafe/common-concepts/browsers/browser-support.html#browsers-on-remote-devices
        can run tests in multiple browsers
        can set test speed with --speed cli option
        can set breakpoints with t.debug()
        can access console messages

redux-form validation

P: watch files and execute an npm script-task when files change
S: npm-watch
    https://www.npmjs.com/package/npm-watch