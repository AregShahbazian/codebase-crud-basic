***********
STORIES

Separate generic and domain specific code for components+containers

Separate generic and domain specific code
    src/
        codebase/
            actions/
            components/
            ...
        author/
            actions/
            components/
            ...
    React-components will use the domain-specific exports
    Unit tests will test the codebase functions

book/publisher page

Edit-form hidden under row
    validation (using redux-form / redux-saga-routines)

remove client side filtering
    filtering happens server side with URL parameters

implement filter requests

implement sort requests

implement pagination:
    http://www.vinaysahni.com/best-practices-for-a-pragmatic-restful-api#pagination
    https://developers.facebook.com/docs/graph-api/using-graph-api/#paging

Unit test api code

Secure login (https)

Payments (eg paypal, ideal)

implement caching for api-requests (see real-world examples)
    check if entity is already present in state, and only dor HTTP request if not present.
    when page is reloaded this won't work ... state is cleared when page is reloaded

    redux-saga real-world example uses selectors from reducer/ folder and the select-effect from redux-saga to get
    entity from cache


***********
JUST IN CASE


    http://redux.js.org/

    Videos basic
        https://courses.wesbos.com/account/access/5986e63f730b2a3a098bb488/view/03a1ca9b74

    code examples:
        https://github.com/facebook/fixed-data-table
        https://medium.com/@tannerlinsley/why-i-wrote-react-table-and-the-problems-it-has-solved-for-nozzle-others-445c4e93d4a8

    React Components
        https://github.com/jquense/react-widgets
        https://github.com/brillout/awesome-react-components


    change entity? the change:
        reducer unit tests
        action unit test
        reducers
        action creator
        view objects

    Async actions (API calls)
	redux-saga

    Form fields
	react-widgets
	redux-form
	        https://github.com/erikras/redux-form
            https://www.youtube.com/watch?v=eDTi7lYR1VU&feature=youtu.be
    redux-logic
        https://medium.com/@jeffbski/where-do-i-put-my-business-logic-in-a-react-redux-application-9253ef91ce1

    Routing in combination with redux state. To replay and record routing actions
	react-router-redux

    Other libraries
	https://www.npmjs.com/browse/keyword/redux
	redux-logger?
    (redux-actions)?
	    react-modal or react-redux-modal
	    react-tabs


***********
HISTORY

Setup redux-form and react-widgets
    examples
        https://redux-form.com/7.0.4/docs/gettingstarted.md/
        https://redux-form.com/7.0.4/examples/react-widgets/
    localization
        https://github.com/jquense/react-widgets/blob/v4/packages/docs/components/pages/i18n.md


Accessing PropTypes via the main React package is deprecated, and will be removed in  React v16.0. Use the latest available v15.* prop-types package from npm instead. For info on usage, compatibility, migration and more, see https://fb.me/prop-types-docs
    We're fine
        https://fb.me/prop-types-docs
        "Code like this is still fine:"


Implement form-fields using redux-form
    https://redux-form.com/7.0.4/examples/react-widgets/

    configure Globalize to support NumberPicker

    found out because:
    https://www.npmjs.com/package/react-widgets-moment-localizer
    ("... if you plan on using the NumberPicker ...")

        Webpack Globalize plugin is necessary
            because: https://github.com/globalizejs/globalize/issues/603
            documentation:  https://github.com/rxaviers/globalize-webpack-plugin
            example:        https://github.com/globalizejs/globalize/tree/master/examples/app-npm-webpack

                            http://jquense.github.io/react-widgets/localization/

    Initializing redux-form values from state:
        https://redux-form.com/7.1.1/examples/initializefromstate/
            set initialValues in props


    No react-widgets for now (style=overkill). just Field


Implement stubs in wiremock
    GET /author
    GET /author/{id}
    POST /author
    PATCH /author/{id}
    PUT /author/{id}
    DELETE /author/{id}

implement redux saga to call stub and display data
    for multiple operations
        refactoring actions
       unit tests actions
    using schemas
    using normalizr

    using generators
        separate codebase and domain
        with unit tests
            https://www.npmjs.com/package/redux-saga-test-plan

    using axios instead of fetch

inside each domain/ folder should be an index that's an interface to domain-specific code
    see: saga
    apply for actions
    apply for api
    apply for reducers

reducer unit tests

Implement redux-saga-routines

unit test api for normalizr results

Implement reducers for crud actions
    fetchAll:   GET    endpoint/
        for getting all objects
        replace state
    fetchById:  GET    endpoint/${id}
        for getting object by id (or uuid)
    search:     GET    endpoint?field1=val&field2=val2&sort=-field1
    create:     POST    endpoint/
        for creating a new object.
        add object in response to state
    replace:    PUT     endpoint/${id}
        for replacing entire object. It sends the entire object in the body
        replace object in state with id
    update:     PATCH   endpoint/${id}
        for replacing specific fields of object. It sends only specific fields in the body
        replace object in state with id
    delete:     DELETE  endpoint/${id}
        for deleting object.
        delete object in state with id

        more on PUT vs PATCH: http://www.baeldung.com/http-put-patch-difference-spring

generalize entity configuration
    entity name (to be used in schemas)                             author
        used in reducer domain to pass to reducer generic
        used in api domain to create schema
    entity schema                                                   {Schema}
        used in api domain to create initial state
        used in reducer domain to create initial state
    entity endpoint                                                 author
        used in api domain
    entity routine name
        used in action domain to create routines                    AUTHOR


add new entity to domain to implement relations
    entity book:
        each author can have multiple books
        each book can have one author
        author oneToMany book

    entity publisher:
        each author can have one publisher
        each publisher can multiple authors
        author manyToOne publisher

    how does normalizr handle nested entities?
        simple schema specification
        see: unit-tests

    how do requests look like for nested entities?
        For a response to an entity1 request, the entity1-state is updated, and all nested data is in the entity1 state
        If entity1 contains an entity2, then the entity2 data will be stored inside the "entities" of the entity1-state
        If a response to an entity2 request is received, the entity2-state will be populated

        This is GOOD!:
            because:
                if entity2 is queried indirectly through entity1, then sometimes it's desirable to store only
                partial entity2-data. This partialization is entity1-specific, and belongs in the entity1 state

                if entity2 is queried directly, the entire entity2 object will be stored, it it's own entity2-state
