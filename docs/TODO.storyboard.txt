***********
STORIES

implement pagination in stub
    SPIKE JSON API
    create JSONAPI stubs with pagination data
    __files
        pagination:
            default name asc sort
            name desc sort
            dob asc name desc sort
            dob filter
            name filter
        crud:
            a14
            a13 updated
            a13
    mappings
        TODO

    use normalizr alternative
        https://github.com/paularmstrong/normalizr/blob/master/docs/jsonapi.md
            specifically json-api-normalizer
    NOTE: JSONAPI redux implementations
        http://jsonapi.org/implementations/
            search: "redux"






handle single entity actions like create, delete and update.
P1: After creating, the page has +1 row, and it might even not
belong in that page due to sorting
P2: if single-entity operations by User 1 only perform partial table refreshing, and User 2 changes some data at the
same time, then the partial table refresh will miss out the changes made by User 2 but will suggest correct refreshing!
    https://ux.stackexchange.com/questions/37014/what-should-happen-when-i-add-a-row-to-a-paginated-sorted-list
        create row highlights the newly created row to indicate that there's something different about it (not sorted)
        - doesnt solve pagination issue

    what does the page do? fetch all rows again to fill page?
        if YES: need to save tableLocalState (pageSize, page, sorted) in store too, so it's persisted after re-fetch
        if YES:
            new rows can be lost due to sorting/pagination
            edited rows can be lost due to sorting/pagination
            (S-postponed: after full re-fetch, put new/edited row on top and highlight it?)



documentation on generic code

e2e testing

implement sort requests
    SPIKE server side sorting
    Sorting states per field: asc, desc, none
    Create table headers with field-name and

implement pagination:
    http://www.vinaysahni.com/best-practices-for-a-pragmatic-restful-api#pagination
    https://developers.facebook.com/docs/graph-api/using-graph-api/#paging

book/publisher page

Secure login (https)

Payments (eg paypal, ideal)

implement caching for api-requests (see real-world examples)
    check if entity is already present in state, and only dor HTTP request if not present.
    when page is reloaded this won't work ... state is cleared when page is reloaded

    redux-saga real-world example uses selectors from reducer/ folder and the select-effect from redux-saga to get
    entity from cache

use selectors


***********
JUST IN CASE


    http://redux.js.org/

    Videos basic
        https://courses.wesbos.com/account/access/5986e63f730b2a3a098bb488/view/03a1ca9b74

    code examples:
        https://github.com/facebook/fixed-data-table
        https://medium.com/@tannerlinsley/why-i-wrote-react-table-and-the-problems-it-has-solved-for-nozzle-others-445c4e93d4a8

    React Components
        https://github.com/jquense/react-widgets
        https://github.com/brillout/awesome-react-components


    change entity? the change:
        reducer unit tests
        action unit test
        reducers
        action creator
        view objects

    Async actions (API calls)
	redux-saga

    Form fields
	react-widgets
	redux-form
	        https://github.com/erikras/redux-form
            https://www.youtube.com/watch?v=eDTi7lYR1VU&feature=youtu.be
    redux-logic
        https://medium.com/@jeffbski/where-do-i-put-my-business-logic-in-a-react-redux-application-9253ef91ce1

    Routing in combination with redux state. To replay and record routing actions
	react-router-redux

    Other libraries
	https://www.npmjs.com/browse/keyword/redux
	redux-logger?
    (redux-actions)?
	    react-modal or react-redux-modal
	    react-tabs

    Improving performance by profiling, using immutable data structures, and more ..
        https://reactjs.org/docs/optimizing-performance.html#using-immutable-data-structures

    Immutable updates and data structures for redux:
        https://github.com/markerikson/redux-ecosystem-links/blob/master/immutable-data.md#immutable-update-utilities

    Peer projects:
        http://www.thegreatcodeadventure.com/react-redux-tutorial-part-vi-the-edit-feature/
        http://blog.isquaredsoftware.com/2017/01/practical-redux-part-7-forms-editing-reducers/
            redux orm


***********
HISTORY

Setup redux-form and react-widgets
    examples
        https://redux-form.com/7.0.4/docs/gettingstarted.md/
        https://redux-form.com/7.0.4/examples/react-widgets/
    localization
        https://github.com/jquense/react-widgets/blob/v4/packages/docs/components/pages/i18n.md


Accessing PropTypes via the main React package is deprecated, and will be removed in  React v16.0. Use the latest available v15.* prop-types package from npm instead. For info on usage, compatibility, migration and more, see https://fb.me/prop-types-docs
    We're fine
        https://fb.me/prop-types-docs
        "Code like this is still fine:"


Implement form-fields using redux-form
    https://redux-form.com/7.0.4/examples/react-widgets/

    configure Globalize to support NumberPicker

    found out because:
    https://www.npmjs.com/package/react-widgets-moment-localizer
    ("... if you plan on using the NumberPicker ...")

        Webpack Globalize plugin is necessary
            because: https://github.com/globalizejs/globalize/issues/603
            documentation:  https://github.com/rxaviers/globalize-webpack-plugin
            example:        https://github.com/globalizejs/globalize/tree/master/examples/app-npm-webpack

                            http://jquense.github.io/react-widgets/localization/

    Initializing redux-form values from state:
        https://redux-form.com/7.1.1/examples/initializefromstate/
            set initialValues in props


    No react-widgets for now (style=overkill). just Field


Implement stubs in wiremock
    GET /author
    GET /author/{id}
    POST /author
    PATCH /author/{id}
    PUT /author/{id}
    DELETE /author/{id}

implement redux saga to call stub and display data
    for multiple operations
        refactoring actions
       unit tests actions
    using schemas
    using normalizr

    using generators
        separate codebase and domain
        with unit tests
            https://www.npmjs.com/package/redux-saga-test-plan

    using axios instead of fetch

inside each domain/ folder should be an index that's an interface to domain-specific code
    see: saga
    apply for actions
    apply for api
    apply for reducers

reducer unit tests

Implement redux-saga-routines

unit test api for normalizr results

Implement reducers for crud actions
    fetchAll:   GET    endpoint/
        for getting all objects
        replace state
    fetchById:  GET    endpoint/${id}
        for getting object by id (or uuid)
    search:     GET    endpoint?field1=val&field2=val2&sort=-field1
    create:     POST    endpoint/
        for creating a new object.
        add object in response to state
    replace:    PUT     endpoint/${id}
        for replacing entire object. It sends the entire object in the body
        replace object in state with id
    update:     PATCH   endpoint/${id}
        for replacing specific fields of object. It sends only specific fields in the body
        replace object in state with id
    delete:     DELETE  endpoint/${id}
        for deleting object.
        delete object in state with id

        more on PUT vs PATCH: http://www.baeldung.com/http-put-patch-difference-spring

generalize entity configuration
    entity name (to be used in schemas)                             author
        used in reducer domain to pass to reducer generic
        used in api domain to create schema
    entity schema                                                   {Schema}
        used in api domain to create initial state
        used in reducer domain to create initial state
    entity endpoint                                                 author
        used in api domain
    entity routine name
        used in action domain to create routines                    AUTHOR


add new entity to domain to implement relations
    entity book:
        each author can have multiple books
        each book can have one author
        author oneToMany book

    entity publisher:
        each author can have one publisher
        each publisher can multiple authors
        author manyToOne publisher

    how does normalizr handle nested entities?
        simple schema specification
        see: unit-tests

    how do requests look like for nested entities?
        For a response to an entity1 request, the entity1-state is updated, and all nested data is in the entity1 state
        If entity1 contains an entity2, then the entity2 data will be stored inside the "entities" of the entity1-state
        If a response to an entity2 request is received, the entity2-state will be populated

        This is GOOD!:
            because:
                if entity2 is queried indirectly through entity1, then sometimes it's desirable to store only
                partial entity2-data. This partialization is entity1-specific, and belongs in the entity1 state

                if entity2 is queried directly, the entire entity2 object will be stored, it it's own entity2-state

fix delete success
    P: DELETE_SUCCESS mutates the state, but the components are not re-rendered
    E: see https://stackoverflow.com/questions/39513753/my-redux-state-has-changed-why-doesnt-react-trigger-a-re-render
        never mutate the state. Instead of
                deleting the id from the result-list of the state and returning the mutated state
        do: create new object and copy all data (except id-to-delete) to new state-object

remove client side filtering
    filtering should happen server side with URL parameters

fix reducer bugs caused by non-immutable state updating
    use immutability-helper to update state immutably
        https://github.com/kolodny/immutability-helper
    use $splice helper
    write unit tests for immutable update
    on ALL reducers

functional edit button + action + edit form
    *edit button fills edit form with row data
        setting Field value:
            https://github.com/erikras/redux-form/issues/369
    apply button clears edit form


EntityForm
    Create New or Edit buttons dispatch form.PREPARE action
        Create New sets
            editMode: false
        Edit sets
            editMode: true
            id: entity-id
    Save button dispatches CREATE or UPDATE, depending on mode
    CREATE/UPDATE FULFILL clears workspace state

unit tests prepareEntityForm

unit tests clearWorkspace

Handle form-population and -clearing with redux-form reducer plugin
    find alternative for workspace-id for update/create choice
    remove workspace from state


separate components and containers
    notes: see SPIKE

write e2e tests with TestCafe

functional delete button


Entity-form validation (using redux-form / redux-saga-routines)
    SPIKE redux-form validation
    implement form validation with redux-form
        implement sync validation
        stop submitting if there's errors
    redux-saga-routines validation handling combo with redux-fom
        https://github.com/afitiskin/redux-saga-routines
        ! not necessary fo now

state handling only in App component
    all mapStateToProps functions replaced by one mapStateToProps in the App component

extract domain-specific code from generic code-base code
    container: generic. args: component, [validate function]
    using component-generator functions in the props
        inspired by: http://blog.matthewcheok.com/building-generic-components-in-react/

refactor: move ContainerGenerator-call to inside component
    NO! component is pure, so inly a render method. And everything inside the render method will be executed on every update...

generalize AuthorAppContainer

split edit form and create form. This is not necessary now, but is necessary if page requires create form AND edit form at the same time
    //split reducers
    split container
    duplicate component

implement server side filtering
    create stub for filtering just author 2
    rename routine search -> filter
    create filter form component
        "Apply Filter" button
    create filter form container
            routine: filter
    filter form submitted with HTTP GET
    filter params in url
    e2e tests

implement server side filtering
    create stub for filtering just author 2
    rename routine search -> filter
    create filter form component
        "Apply Filter" button
    create filter form container
            routine: filter
    filter form submitted with HTTP GET
    filter params in url
    e2e tests
    fetch_all should use filters already
        fetch_all and filter both necessary??
            NO, only filter
    delete traces of fetch_all

use 3rd party table for sorting/pagination
    rc-table:   https://www.npmjs.com/package/rc-table
 -> react table: https://www.npmjs.com/package/react-table?activeTab=readme#fully-controlled-component
        can handle server side filtering, custom texts, custom cells and more ..
    finish plugging in react-table
        pages and loading: in the store-state
        pageSize, page and sorted: stay in table local state

state handling only as high as necessary
    only if parent needs state for 2 or moe children

